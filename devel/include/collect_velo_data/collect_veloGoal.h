// Generated by gencpp from file collect_velo_data/collect_veloGoal.msg
// DO NOT EDIT!


#ifndef COLLECT_VELO_DATA_MESSAGE_COLLECT_VELOGOAL_H
#define COLLECT_VELO_DATA_MESSAGE_COLLECT_VELOGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>

namespace collect_velo_data
{
template <class ContainerAllocator>
struct collect_veloGoal_
{
  typedef collect_veloGoal_<ContainerAllocator> Type;

  collect_veloGoal_()
    : enable_work()  {
    }
  collect_veloGoal_(const ContainerAllocator& _alloc)
    : enable_work(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _enable_work_type;
  _enable_work_type enable_work;





  typedef boost::shared_ptr< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> const> ConstPtr;

}; // struct collect_veloGoal_

typedef ::collect_velo_data::collect_veloGoal_<std::allocator<void> > collect_veloGoal;

typedef boost::shared_ptr< ::collect_velo_data::collect_veloGoal > collect_veloGoalPtr;
typedef boost::shared_ptr< ::collect_velo_data::collect_veloGoal const> collect_veloGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collect_velo_data::collect_veloGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::collect_velo_data::collect_veloGoal_<ContainerAllocator1> & lhs, const ::collect_velo_data::collect_veloGoal_<ContainerAllocator2> & rhs)
{
  return lhs.enable_work == rhs.enable_work;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::collect_velo_data::collect_veloGoal_<ContainerAllocator1> & lhs, const ::collect_velo_data::collect_veloGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace collect_velo_data

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e05fc3a46e278eaaa08c453de28eddc1";
  }

  static const char* value(const ::collect_velo_data::collect_veloGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe05fc3a46e278eaaULL;
  static const uint64_t static_value2 = 0xa08c453de28eddc1ULL;
};

template<class ContainerAllocator>
struct DataType< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collect_velo_data/collect_veloGoal";
  }

  static const char* value(const ::collect_velo_data::collect_veloGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"std_msgs/Bool enable_work\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::collect_velo_data::collect_veloGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_work);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct collect_veloGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collect_velo_data::collect_veloGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collect_velo_data::collect_veloGoal_<ContainerAllocator>& v)
  {
    s << indent << "enable_work: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.enable_work);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLECT_VELO_DATA_MESSAGE_COLLECT_VELOGOAL_H
